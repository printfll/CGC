
//------------------------------------------------------------------------------
// This code was generated by a tool.
//
//   Tool : Bond Compiler 0.10.1.0
//   File : workflowservice_grpc.cs
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// <auto-generated />
//------------------------------------------------------------------------------


// suppress "Missing XML comment for publicly visible type or member"
#pragma warning disable 1591


#region ReSharper warnings
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable InconsistentNaming
// ReSharper disable CheckNamespace
// ReSharper disable UnusedParameter.Local
// ReSharper disable RedundantUsingDirective
#endregion


namespace Microsoft.CGC.Comm
{
    using System.Collections.Generic;

    [System.CodeDom.Compiler.GeneratedCode("gbc", "0.10.1.0")]
    public static class WorkflowService 
    {
        static readonly string ServiceName = "Microsoft.CGC.Comm.WorkflowService";

        static readonly global::Grpc.Core.Method<global::Bond.Grpc.IMessage<Module>, global::Bond.Grpc.IMessage<AddOrUpdateEntityResponse>> Method_AddModule = new global::Grpc.Core.Method<global::Bond.Grpc.IMessage<Module>, global::Bond.Grpc.IMessage<AddOrUpdateEntityResponse>>(
            global::Grpc.Core.MethodType.Unary,
            ServiceName,
            "AddModule",
            global::Bond.Grpc.Marshaller<Module>.Instance,
            global::Bond.Grpc.Marshaller<AddOrUpdateEntityResponse>.Instance);

        static readonly global::Grpc.Core.Method<global::Bond.Grpc.IMessage<GetEntityRequest>, global::Bond.Grpc.IMessage<GetModuleResponse>> Method_GetModule = new global::Grpc.Core.Method<global::Bond.Grpc.IMessage<GetEntityRequest>, global::Bond.Grpc.IMessage<GetModuleResponse>>(
            global::Grpc.Core.MethodType.Unary,
            ServiceName,
            "GetModule",
            global::Bond.Grpc.Marshaller<GetEntityRequest>.Instance,
            global::Bond.Grpc.Marshaller<GetModuleResponse>.Instance);

        static readonly global::Grpc.Core.Method<global::Bond.Grpc.IMessage<Experiment>, global::Bond.Grpc.IMessage<AddOrUpdateEntityResponse>> Method_AddExperiment = new global::Grpc.Core.Method<global::Bond.Grpc.IMessage<Experiment>, global::Bond.Grpc.IMessage<AddOrUpdateEntityResponse>>(
            global::Grpc.Core.MethodType.Unary,
            ServiceName,
            "AddExperiment",
            global::Bond.Grpc.Marshaller<Experiment>.Instance,
            global::Bond.Grpc.Marshaller<AddOrUpdateEntityResponse>.Instance);

        static readonly global::Grpc.Core.Method<global::Bond.Grpc.IMessage<GetEntityRequest>, global::Bond.Grpc.IMessage<GetExperimentResponse>> Method_GetExperiment = new global::Grpc.Core.Method<global::Bond.Grpc.IMessage<GetEntityRequest>, global::Bond.Grpc.IMessage<GetExperimentResponse>>(
            global::Grpc.Core.MethodType.Unary,
            ServiceName,
            "GetExperiment",
            global::Bond.Grpc.Marshaller<GetEntityRequest>.Instance,
            global::Bond.Grpc.Marshaller<GetExperimentResponse>.Instance);

        public abstract class WorkflowServiceBase
        {
            public abstract global::System.Threading.Tasks.Task<global::Bond.Grpc.IMessage<AddOrUpdateEntityResponse>> AddModule(global::Bond.Grpc.IMessage<Module> request, global::Grpc.Core.ServerCallContext context);

            public abstract global::System.Threading.Tasks.Task<global::Bond.Grpc.IMessage<GetModuleResponse>> GetModule(global::Bond.Grpc.IMessage<GetEntityRequest> request, global::Grpc.Core.ServerCallContext context);

            public abstract global::System.Threading.Tasks.Task<global::Bond.Grpc.IMessage<AddOrUpdateEntityResponse>> AddExperiment(global::Bond.Grpc.IMessage<Experiment> request, global::Grpc.Core.ServerCallContext context);

            public abstract global::System.Threading.Tasks.Task<global::Bond.Grpc.IMessage<GetExperimentResponse>> GetExperiment(global::Bond.Grpc.IMessage<GetEntityRequest> request, global::Grpc.Core.ServerCallContext context);
        }

        public class WorkflowServiceClient : global::Grpc.Core.ClientBase<WorkflowServiceClient>
        {
            public WorkflowServiceClient(global::Grpc.Core.Channel channel) : base(channel)
            {
            }

            protected WorkflowServiceClient() : base()
            {
            }

            protected WorkflowServiceClient(global::Grpc.Core.ClientBase.ClientBaseConfiguration configuration) : base(configuration)
            {
            }

            public virtual global::Grpc.Core.AsyncUnaryCall<global::Bond.Grpc.IMessage<AddOrUpdateEntityResponse>> AddModuleAsync(Module request, global::Grpc.Core.Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
            {
                var message = global::Bond.Grpc.Message.From(request);
                return AddModuleAsync(message, new global::Grpc.Core.CallOptions(headers, deadline, cancellationToken));
            }

            public virtual global::Grpc.Core.AsyncUnaryCall<global::Bond.Grpc.IMessage<AddOrUpdateEntityResponse>> AddModuleAsync(global::Bond.Grpc.IMessage<Module> request, global::Grpc.Core.CallOptions options)
            {
                return CallInvoker.AsyncUnaryCall(Method_AddModule, null, options, request);
            }

            public virtual global::Grpc.Core.AsyncUnaryCall<global::Bond.Grpc.IMessage<GetModuleResponse>> GetModuleAsync(GetEntityRequest request, global::Grpc.Core.Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
            {
                var message = global::Bond.Grpc.Message.From(request);
                return GetModuleAsync(message, new global::Grpc.Core.CallOptions(headers, deadline, cancellationToken));
            }

            public virtual global::Grpc.Core.AsyncUnaryCall<global::Bond.Grpc.IMessage<GetModuleResponse>> GetModuleAsync(global::Bond.Grpc.IMessage<GetEntityRequest> request, global::Grpc.Core.CallOptions options)
            {
                return CallInvoker.AsyncUnaryCall(Method_GetModule, null, options, request);
            }

            public virtual global::Grpc.Core.AsyncUnaryCall<global::Bond.Grpc.IMessage<AddOrUpdateEntityResponse>> AddExperimentAsync(Experiment request, global::Grpc.Core.Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
            {
                var message = global::Bond.Grpc.Message.From(request);
                return AddExperimentAsync(message, new global::Grpc.Core.CallOptions(headers, deadline, cancellationToken));
            }

            public virtual global::Grpc.Core.AsyncUnaryCall<global::Bond.Grpc.IMessage<AddOrUpdateEntityResponse>> AddExperimentAsync(global::Bond.Grpc.IMessage<Experiment> request, global::Grpc.Core.CallOptions options)
            {
                return CallInvoker.AsyncUnaryCall(Method_AddExperiment, null, options, request);
            }

            public virtual global::Grpc.Core.AsyncUnaryCall<global::Bond.Grpc.IMessage<GetExperimentResponse>> GetExperimentAsync(GetEntityRequest request, global::Grpc.Core.Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
            {
                var message = global::Bond.Grpc.Message.From(request);
                return GetExperimentAsync(message, new global::Grpc.Core.CallOptions(headers, deadline, cancellationToken));
            }

            public virtual global::Grpc.Core.AsyncUnaryCall<global::Bond.Grpc.IMessage<GetExperimentResponse>> GetExperimentAsync(global::Bond.Grpc.IMessage<GetEntityRequest> request, global::Grpc.Core.CallOptions options)
            {
                return CallInvoker.AsyncUnaryCall(Method_GetExperiment, null, options, request);
            }

            protected override WorkflowServiceClient NewInstance(global::Grpc.Core.ClientBase.ClientBaseConfiguration configuration)
            {
                return new WorkflowServiceClient(configuration);
            }
        }

        public static global::Grpc.Core.ServerServiceDefinition BindService(WorkflowServiceBase serviceImpl)
        {
            return global::Grpc.Core.ServerServiceDefinition.CreateBuilder()
                    .AddMethod(Method_AddModule, serviceImpl.AddModule)
                    .AddMethod(Method_GetModule, serviceImpl.GetModule)
                    .AddMethod(Method_AddExperiment, serviceImpl.AddExperiment)
                    .AddMethod(Method_GetExperiment, serviceImpl.GetExperiment)
                    .Build();
        }
    }

} // Microsoft.CGC.Comm
