# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from cluster import cluster_service_pb2 as cluster_dot_cluster__service__pb2
from cluster import task_pb2 as cluster_dot_task__pb2


class ClusterProxyStub(object):
  """/ <summary>
  /     Cluster abstraction.
  / </summary>
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.GetResource = channel.unary_unary(
        '/grpc.cluster.ClusterProxy/GetResource',
        request_serializer=cluster_dot_cluster__service__pb2.GetResourceRequest.SerializeToString,
        response_deserializer=cluster_dot_cluster__service__pb2.GetResourceResponse.FromString,
        )
    self.SubmitTask = channel.unary_unary(
        '/grpc.cluster.ClusterProxy/SubmitTask',
        request_serializer=cluster_dot_task__pb2.Task.SerializeToString,
        response_deserializer=cluster_dot_cluster__service__pb2.SubmitTaskResponse.FromString,
        )
    self.KillTask = channel.unary_unary(
        '/grpc.cluster.ClusterProxy/KillTask',
        request_serializer=cluster_dot_cluster__service__pb2.Request.SerializeToString,
        response_deserializer=cluster_dot_cluster__service__pb2.Response.FromString,
        )
    self.GetStatus = channel.unary_unary(
        '/grpc.cluster.ClusterProxy/GetStatus',
        request_serializer=cluster_dot_cluster__service__pb2.Request.SerializeToString,
        response_deserializer=cluster_dot_cluster__service__pb2.GetStatusResponse.FromString,
        )


class ClusterProxyServicer(object):
  """/ <summary>
  /     Cluster abstraction.
  / </summary>
  """

  def GetResource(self, request, context):
    """/ <summary>
    /     Calculate the resource that the task needeed.
    / </summary>
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SubmitTask(self, request, context):
    """/ <summary>
    /     Try to submit a job.
    / </summary>
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def KillTask(self, request, context):
    """/ <summary>
    /     Try to kill the job
    / </summary>
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetStatus(self, request, context):
    """/ <summary>
    /     Get the current running task status.
    / </summary>
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ClusterProxyServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'GetResource': grpc.unary_unary_rpc_method_handler(
          servicer.GetResource,
          request_deserializer=cluster_dot_cluster__service__pb2.GetResourceRequest.FromString,
          response_serializer=cluster_dot_cluster__service__pb2.GetResourceResponse.SerializeToString,
      ),
      'SubmitTask': grpc.unary_unary_rpc_method_handler(
          servicer.SubmitTask,
          request_deserializer=cluster_dot_task__pb2.Task.FromString,
          response_serializer=cluster_dot_cluster__service__pb2.SubmitTaskResponse.SerializeToString,
      ),
      'KillTask': grpc.unary_unary_rpc_method_handler(
          servicer.KillTask,
          request_deserializer=cluster_dot_cluster__service__pb2.Request.FromString,
          response_serializer=cluster_dot_cluster__service__pb2.Response.SerializeToString,
      ),
      'GetStatus': grpc.unary_unary_rpc_method_handler(
          servicer.GetStatus,
          request_deserializer=cluster_dot_cluster__service__pb2.Request.FromString,
          response_serializer=cluster_dot_cluster__service__pb2.GetStatusResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'grpc.cluster.ClusterProxy', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
