
//------------------------------------------------------------------------------
// This code was generated by a tool.
//
//   Tool : Bond Compiler 0.10.1.0
//   File : userservice_grpc.cs
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// <auto-generated />
//------------------------------------------------------------------------------


// suppress "Missing XML comment for publicly visible type or member"
#pragma warning disable 1591


#region ReSharper warnings
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable InconsistentNaming
// ReSharper disable CheckNamespace
// ReSharper disable UnusedParameter.Local
// ReSharper disable RedundantUsingDirective
#endregion


namespace Microsoft.CGC.Comm
{
    using System.Collections.Generic;

    [System.CodeDom.Compiler.GeneratedCode("gbc", "0.10.1.0")]
    public static class UserService 
    {
        static readonly string ServiceName = "Microsoft.CGC.Comm.UserService";

        static readonly global::Grpc.Core.Method<global::Bond.Grpc.IMessage<GetUsersRequest>, global::Bond.Grpc.IMessage<GetUsersResponse>> Method_GetUsers = new global::Grpc.Core.Method<global::Bond.Grpc.IMessage<GetUsersRequest>, global::Bond.Grpc.IMessage<GetUsersResponse>>(
            global::Grpc.Core.MethodType.Unary,
            ServiceName,
            "GetUsers",
            global::Bond.Grpc.Marshaller<GetUsersRequest>.Instance,
            global::Bond.Grpc.Marshaller<GetUsersResponse>.Instance);

        static readonly global::Grpc.Core.Method<global::Bond.Grpc.IMessage<PermissionCheckRequest>, global::Bond.Grpc.IMessage<PermissionCheckResponse>> Method_HasPermission = new global::Grpc.Core.Method<global::Bond.Grpc.IMessage<PermissionCheckRequest>, global::Bond.Grpc.IMessage<PermissionCheckResponse>>(
            global::Grpc.Core.MethodType.Unary,
            ServiceName,
            "HasPermission",
            global::Bond.Grpc.Marshaller<PermissionCheckRequest>.Instance,
            global::Bond.Grpc.Marshaller<PermissionCheckResponse>.Instance);

        public abstract class UserServiceBase
        {
            public abstract global::System.Threading.Tasks.Task<global::Bond.Grpc.IMessage<GetUsersResponse>> GetUsers(global::Bond.Grpc.IMessage<GetUsersRequest> request, global::Grpc.Core.ServerCallContext context);

            public abstract global::System.Threading.Tasks.Task<global::Bond.Grpc.IMessage<PermissionCheckResponse>> HasPermission(global::Bond.Grpc.IMessage<PermissionCheckRequest> request, global::Grpc.Core.ServerCallContext context);
        }

        public class UserServiceClient : global::Grpc.Core.ClientBase<UserServiceClient>
        {
            public UserServiceClient(global::Grpc.Core.Channel channel) : base(channel)
            {
            }

            protected UserServiceClient() : base()
            {
            }

            protected UserServiceClient(global::Grpc.Core.ClientBase.ClientBaseConfiguration configuration) : base(configuration)
            {
            }

            public virtual global::Grpc.Core.AsyncUnaryCall<global::Bond.Grpc.IMessage<GetUsersResponse>> GetUsersAsync(GetUsersRequest request, global::Grpc.Core.Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
            {
                var message = global::Bond.Grpc.Message.From(request);
                return GetUsersAsync(message, new global::Grpc.Core.CallOptions(headers, deadline, cancellationToken));
            }

            public virtual global::Grpc.Core.AsyncUnaryCall<global::Bond.Grpc.IMessage<GetUsersResponse>> GetUsersAsync(global::Bond.Grpc.IMessage<GetUsersRequest> request, global::Grpc.Core.CallOptions options)
            {
                return CallInvoker.AsyncUnaryCall(Method_GetUsers, null, options, request);
            }

            public virtual global::Grpc.Core.AsyncUnaryCall<global::Bond.Grpc.IMessage<PermissionCheckResponse>> HasPermissionAsync(PermissionCheckRequest request, global::Grpc.Core.Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
            {
                var message = global::Bond.Grpc.Message.From(request);
                return HasPermissionAsync(message, new global::Grpc.Core.CallOptions(headers, deadline, cancellationToken));
            }

            public virtual global::Grpc.Core.AsyncUnaryCall<global::Bond.Grpc.IMessage<PermissionCheckResponse>> HasPermissionAsync(global::Bond.Grpc.IMessage<PermissionCheckRequest> request, global::Grpc.Core.CallOptions options)
            {
                return CallInvoker.AsyncUnaryCall(Method_HasPermission, null, options, request);
            }

            protected override UserServiceClient NewInstance(global::Grpc.Core.ClientBase.ClientBaseConfiguration configuration)
            {
                return new UserServiceClient(configuration);
            }
        }

        public static global::Grpc.Core.ServerServiceDefinition BindService(UserServiceBase serviceImpl)
        {
            return global::Grpc.Core.ServerServiceDefinition.CreateBuilder()
                    .AddMethod(Method_GetUsers, serviceImpl.GetUsers)
                    .AddMethod(Method_HasPermission, serviceImpl.HasPermission)
                    .Build();
        }
    }

} // Microsoft.CGC.Comm
